set(TARGET_INCLUDES_PREFIX_PATH @TARGET_INCLUDES_PREFIX_PATH@)
set(TARGET_LIBRARY_PREFIX_PATHS @TARGET_LIBRARY_PREFIX_PATHS@)
# "${CURRENT_INSTALLED_DIR}/$<$<CONFIG:DEBUG>:debug/>lib")
# if(${DYNAMIC_LIBRARY})
#     list(APPEND TARGET_LIBRARY_PREFIX_PATHS "${CURRENT_INSTALLED_DIR}/$<$<CONFIG:DEBUG>:debug/>bin")
# endif()

set(_LIBRARIES "libEGL" "libGLESv2")

# if(WIN32)
#     list(APPEND LIBRARIES_
#         cfgmgr32
#         powrprof
#         propsys
#         setupapi
#         userenv
#         wbemuuid
#         winmm
#         advapi32
#         comdlg32
#         dbghelp
#         dnsapi
#         gdi32
#         msimg32
#         odbc32
#         odbccp32
#         oleaut32
#         shell32
#         shlwapi
#         user32
#         usp10
#         uuid
#         version
#         wininet
#         winspool
#         ws2_32
#         delayimp
#         kernel32
#         ole32)
# elseif(APPLE)
#     list(APPEND LIBRARIES_ 
#         ApplicationServices
#         AppKit
#         CoreFoundation
#         IOKit
#         OpenDirectory
#         Security
#         bsm
#         pmenergy
#         pmsample)
# endif()

foreach(LIB_NAME ${_LIBRARIES})
    if(TARGET unofficial::angle::${LIB_NAME})
        continue()
    endif()

    message(STATUS "Searching for ${LIB_NAME} in ${TARGET_LIBRARY_PREFIX_PATHS}")
    find_library(_LIB NAMES ${LIB_NAME} PATHS ${TARGET_LIBRARY_PREFIX_PATHS})
    if(NOT _LIB)
        message(WARNING "Link target ${LIB_NAME} was not found and was excluded from the package")
        continue()
    endif()

    add_library(unofficial::angle::${LIB_NAME} @TARGET_IMPORTED_LIBRARY_TYPE@ IMPORTED)

    # set_target_properties(unofficial::angle::${LIB_NAME} PROPERTIES IMPORTED_LOCATION ${_LIB})
    set_target_properties(unofficial::angle::${LIB_NAME} PROPERTIES INTERFACE_LINK_LIBRARIES ${_LIB})
    target_include_directories(unofficial::angle::${LIB_NAME} INTERFACE ${TARGET_INCLUDES_PREFIX_PATH})
    
    # target_link_libraries(unofficial-angle INTERFACE ${_LIB})
    # unset(_LIB CACHE)
endforeach()

# libEGL depends on libGLESv2
target_link_libraries(unofficial::angle::libEGL INTERFACE unofficial::angle::libGLESv2)