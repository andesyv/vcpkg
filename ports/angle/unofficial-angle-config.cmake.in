set(TARGET_INCLUDES_PREFIX_PATH @PACKAGES_INCLUDE_DIR@)
set(TARGET_LIBRARY_PREFIX_PATH @CONFIG_TARGET_LIBRARY_PREFIX_PATH@)
set(TARGET_IMPORTED_LIBRARY_TYPE @CONFIG_TARGET_IMPORTED_LIBRARY_TYPE@)

set(LIBRARY_TARGETS @CONFIG_TARGET_LIBRARIES@)

function(find_shared_library OUT_VAR NAME PATHS)
    if(WIN32)
        SET(SHARED_LIBRARY_SUFFIXES ".dll")
    elseif(LINUX)
        SET(SHARED_LIBRARY_SUFFIXES ".so")
    elseif(APPLE)
        SET(SHARED_LIBRARY_SUFFIXES ".dylib")
    else()
        message(FATAL_ERROR "Unimplemented platform")
    endif()

    foreach(EXT IN LISTS SHARED_LIBRARY_SUFFIXES)
        list(APPEND NAMES_WITH_SUFFIXES "${NAME}${EXT}")
    endforeach()

    find_file(TEMP_VAR NAMES ${NAMES_WITH_SUFFIXES} PATHS ${PATHS})
    set(${OUT_VAR} "${TEMP_VAR}" PARENT_SCOPE)
    unset(TEMP_VAR CACHE)
endfunction()

# ANGLE gets built with the lib prefix on all platforms, so prevent os-specific logic of CMAKE_FIND_LIBRARY_PREFIXES
# by zeroing it
set(CMAKE_FIND_LIBRARY_PREFIXES_OLD ${CMAKE_FIND_LIBRARY_PREFIXES})
set(CMAKE_FIND_LIBRARY_PREFIXES "")

foreach(LIB_TARGET ${LIBRARY_TARGETS})
    if(TARGET unofficial::angle::${LIB_TARGET})
        continue()
    endif()

    # Static release library
    message(DEBUG "Searching for ${LIB_TARGET} and ${LIB_TARGET}_static in ${TARGET_LIBRARY_PREFIX_PATH}/lib and ${TARGET_LIBRARY_PREFIX_PATH}/bin")
    # (Both Windows and Apple platforms use a static "loader" library for their shared libraries)
    if(${TARGET_IMPORTED_LIBRARY_TYPE} STREQUAL "STATIC" OR NOT LINUX)
        find_library(LIB_PATH_STATIC NAMES "${LIB_TARGET}" "${LIB_TARGET}_static" PATHS "${TARGET_LIBRARY_PREFIX_PATH}/lib" NO_DEFAULT_PATH)
        if(NOT LIB_PATH_STATIC)
            message(WARNING "Static library for target ${LIB_TARGET} was not found and was excluded from the package")
            continue()
        endif()
    endif()

    # Dynamic release library
    if(${TARGET_IMPORTED_LIBRARY_TYPE} STREQUAL "SHARED")
        # find_library(LIB_PATH_SHARED NAMES ${LIB_TARGET} PATHS "${TARGET_LIBRARY_PREFIX_PATH}/bin" NO_DEFAULT_PATH)
        find_shared_library(LIB_PATH_SHARED ${LIB_TARGET} "${TARGET_LIBRARY_PREFIX_PATH}/bin")

        if(NOT LIB_PATH_SHARED)
            message(WARNING "Shared library for target ${LIB_TARGET} was not found and was excluded from the package")
            continue()
        endif()

        if(LINUX)
            set(LIB_PATH_STATIC ${LIB_PATH_SHARED})
        endif()

        add_library(unofficial::angle::${LIB_TARGET} SHARED IMPORTED)

        set_target_properties(
            unofficial::angle::${LIB_TARGET} PROPERTIES
            IMPORTED_LOCATION ${LIB_PATH_SHARED}
            IMPORTED_IMPLIB ${LIB_PATH_STATIC}
            IMPORTED_CONFIGURATIONS "RELEASE"
        )
    else()
        add_library(unofficial::angle::${LIB_TARGET} STATIC IMPORTED)

        set_target_properties(

            unofficial::angle::${LIB_TARGET} PROPERTIES
            IMPORTED_LOCATION ${LIB_PATH_STATIC}
            IMPORTED_CONFIGURATIONS "RELEASE"
        )
    endif()

    # set_target_properties(unofficial::angle::${LIB_TARGET} PROPERTIES INTERFACE_LINK_LIBRARIES ${_LIB})
    target_include_directories(unofficial::angle::${LIB_TARGET} INTERFACE ${TARGET_INCLUDES_PREFIX_PATH})

    # Static debug library
    message(DEBUG "Searching for ${LIB_TARGET} and ${LIB_TARGET}_static  in ${TARGET_LIBRARY_PREFIX_PATH}/debug/lib and ${TARGET_LIBRARY_PREFIX_PATH}/debug/bin")
    if(${TARGET_IMPORTED_LIBRARY_TYPE} STREQUAL "STATIC" OR NOT LINUX)
        find_library(LIB_DEBUG_PATH_STATIC NAMES ${LIB_TARGET} "${LIB_TARGET}_static" PATHS "${TARGET_LIBRARY_PREFIX_PATH}/debug/lib" NO_DEFAULT_PATH)
        if(NOT LIB_DEBUG_PATH_STATIC)
            message(DEBUG "Static debug library was not found. Short-circuiting...")
            continue()
        endif()
    endif()

    # Dynamic debug library
    if(${TARGET_IMPORTED_LIBRARY_TYPE} STREQUAL "SHARED")
        find_shared_library(LIB_DEBUG_PATH_SHARED ${LIB_TARGET} "${TARGET_LIBRARY_PREFIX_PATH}/debug/bin")

        if(NOT LIB_DEBUG_PATH_SHARED)
            message(DEBUG "Dynamic debug library was not found. Short-circuiting...")
            continue()
        endif()

        if(LINUX)
            set(LIB_DEBUG_PATH_STATIC ${LIB_DEBUG_PATH_SHARED})
        endif()

        set_target_properties(
            unofficial::angle::${LIB_TARGET} PROPERTIES
            IMPORTED_LOCATION_DEBUG ${LIB_DEBUG_PATH_SHARED}
            IMPORTED_IMPLIB_DEBUG ${LIB_DEBUG_PATH_STATIC}
            IMPORTED_CONFIGURATIONS "RELEASE;DEBUG"
        )
    else()
        set_target_properties(
            unofficial::angle::${LIB_TARGET} PROPERTIES
            IMPORTED_LOCATION_DEBUG ${LIB_DEBUG_PATH_STATIC}
            IMPORTED_CONFIGURATIONS "RELEASE;DEBUG"
        )
    endif()

    message(DEBUG "Target unofficial::angle::${LIB_TARGET} has properties:")
    get_target_property(TEMP_VAR unofficial::angle::${LIB_TARGET} IMPORTED_LOCATION)
    message(DEBUG "IMPORTED_LOCATION: ${TEMP_VAR}")
    get_target_property(TEMP_VAR unofficial::angle::${LIB_TARGET} IMPORTED_LOCATION_DEBUG)
    message(DEBUG "IMPORTED_LOCATION_DEBUG: ${TEMP_VAR}")
    get_target_property(TEMP_VAR unofficial::angle::${LIB_TARGET} IMPORTED_IMPLIB)
    message(DEBUG "IMPORTED_IMPLIB: ${TEMP_VAR}")
    get_target_property(TEMP_VAR unofficial::angle::${LIB_TARGET} IMPORTED_IMPLIB_DEBUG)
    message(DEBUG "IMPORTED_IMPLIB_DEBUG: ${TEMP_VAR}")
    get_target_property(TEMP_VAR unofficial::angle::${LIB_TARGET} IMPORTED_CONFIGURATIONS)
    message(DEBUG "IMPORTED_CONFIGURATIONS: ${TEMP_VAR}")
    unset(TEMP_VAR)
    
    # target_link_libraries(unofficial-angle INTERFACE ${_LIB})
    unset(LIB_TARGET)
    unset(LIB_PATH_STATIC CACHE)
    unset(LIB_PATH_SHARED)
    unset(LIB_DEBUG_PATH_STATIC CACHE)
    unset(LIB_DEBUG_PATH_SHARED)
endforeach()

set(CMAKE_FIND_LIBRARY_PREFIXES ${CMAKE_FIND_LIBRARY_PREFIXES_OLD})
unset(CMAKE_FIND_LIBRARY_PREFIXES_OLD)


# Transative dependencies
target_link_libraries(unofficial::angle::libEGL INTERFACE unofficial::angle::libGLESv2)

foreach(LIB_TARGET ${LIBRARY_TARGETS})
    if(NOT (TARGET unofficial::angle::${LIB_TARGET}) OR "${LIB_TARGET}" STREQUAL "libEGL" OR "${LIB_TARGET}" STREQUAL "libGLESv2")
        continue()
    endif()

    target_link_libraries(unofficial::angle::libGLESv2 INTERFACE unofficial::angle::${LIB_TARGET})
endforeach()